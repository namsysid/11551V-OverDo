{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nLeftMotor = Motor(Ports.PORT8, False)\nRightMotor = Motor(Ports.PORT11, True)\n#endregion VEXcode Generated Robot Configuration\nmessage1 = Event()\nBlueGoalUp = Event()\nBlueGoalDn = Event()\nfire = Event()\nerror = 0\noutput = 0\n\ndef drivestraight_distance_heading_velocity_kp(drivestraight_distance_heading_velocity_kp__distance, drivestraight_distance_heading_velocity_kp__heading, drivestraight_distance_heading_velocity_kp__velocity, drivestraight_distance_heading_velocity_kp__kp):\n    global message1, BlueGoalUp, BlueGoalDn, fire, error, output\n    LeftMotor.set_position(0, DEGREES)\n    RightMotor.set_position(0, DEGREES)\n    if drivestraight_distance_heading_velocity_kp__velocity > 0:\n        while RightMotor.position(DEGREES) < drivestraight_distance_heading_velocity_kp__distance:\n            error = drivestraight_distance_heading_velocity_kp__heading - brain_inertial.rotation()\n            output = error * drivestraight_distance_heading_velocity_kp__kp\n            LeftMotor.set_velocity((drivestraight_distance_heading_velocity_kp__velocity - output), PERCENT)\n            RightMotor.set_velocity((drivestraight_distance_heading_velocity_kp__velocity + output), PERCENT)\n            LeftMotor.spin(FORWARD)\n            RightMotor.spin(FORWARD)\n            wait(20, MSEC)\n    else:\n        while RightMotor.position(DEGREES) > drivestraight_distance_heading_velocity_kp__distance:\n            error = drivestraight_distance_heading_velocity_kp__heading - brain_inertial.rotation()\n            output = error * drivestraight_distance_heading_velocity_kp__kp\n            LeftMotor.set_velocity((drivestraight_distance_heading_velocity_kp__velocity - output), PERCENT)\n            RightMotor.set_velocity((drivestraight_distance_heading_velocity_kp__velocity + output), PERCENT)\n            LeftMotor.spin(FORWARD)\n            RightMotor.spin(FORWARD)\n            wait(20, MSEC)\n    LeftMotor.stop()\n    RightMotor.stop()\n\ndef when_started1():\n    global message1, BlueGoalUp, BlueGoalDn, fire, error, output\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(50)\n    LeftMotor.set_stopping(BRAKE)\n    RightMotor.set_stopping(BRAKE)\n    drivestraight_distance_heading_velocity_kp(1000, 0, 50, 0.54)\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[8],"name":"LeftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[11],"name":"RightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"","minVersion":"2.4.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"Second","target":"Physical"}