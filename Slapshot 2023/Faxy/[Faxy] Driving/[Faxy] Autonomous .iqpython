{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nLeftMotor = Motor(Ports.PORT12, False)\nRightMotor = Motor(Ports.PORT11, False)\nTouchLedR = Touchled(Ports.PORT10)\nTouchLedL = Touchled(Ports.PORT9)\n#endregion VEXcode Generated Robot Configuration\ndef adjustToRight(velocity):\n    TouchLedL.set_brightness(0)\n    TouchLedR.set_brightness(50)\n    TouchLedR.set_color(Color.ORANGE)\n    LeftMotor.set_velocity(velocity*1.3)\n    RightMotor.set_velocity(velocity*0.9)\n    LeftMotor.spin(FORWARD)\n    RightMotor.spin(FORWARD)\n\ndef adjustToLeft(velocity):\n    TouchLedR.set_brightness(0)\n    TouchLedL.set_brightness(50)\n    TouchLedL.set_color(Color.ORANGE)\n\n    RightMotor.set_velocity(velocity*1.3)\n    LeftMotor.set_velocity(velocity*.9)\n    LeftMotor.spin(FORWARD)\n    RightMotor.spin(FORWARD)\n    \ndef drivestraight(distance, velocity):\n    initialRotation = brain_inertial.rotation()\n    print(\"#drivestraight {0} / {1}\".format(distance, velocity))\n    wait(1, SECONDS)\n    print(\"#drivestraight reset heading {0} / {1}\".format(distance, velocity))\n \n    RightMotor.set_max_torque(80, PERCENT)\n    LeftMotor.set_max_torque(80, PERCENT)\n    distance_rotation = distance/20*360\n    error = 0\n    output = 0\n\n    LeftMotor.set_position(0, DEGREES)\n    RightMotor.set_position(0, DEGREES)\n\n    while True:\n        if min(abs(LeftMotor.position(DEGREES)), abs(RightMotor.position(DEGREES))) >= abs(distance_rotation):\n            print('distance reached')\n            break\n\n        rotationDiff = brain_inertial.rotation() - initialRotation\n        print(\"rotationDiff = {0}\".format(rotationDiff))\n        if velocity < 0:\n            rotationDiff = -rotationDiff\n            print(\"rotationDiff = {0} due to negative velocity\".format(rotationDiff))\n\n        if abs(rotationDiff) < 1:\n            # move without adjust\n            LeftMotor.set_velocity(velocity, PERCENT)\n            RightMotor.set_velocity(velocity, PERCENT)\n            LeftMotor.spin(FORWARD)\n            RightMotor.spin(FORWARD)\n            continue\n\n        if rotationDiff > 0:\n            print(\"rotationDiff = {0}, adjustToLeft\".format(rotationDiff))\n            adjustToLeft(velocity)\n        else:\n            print(\"rotationDiff = {0}, adjustToRight\".format(rotationDiff))\n            adjustToRight(velocity)\n\n    LeftMotor.stop()\n    RightMotor.stop()\n\n    LeftMotor.set_velocity(abs(velocity), PERCENT)\n    RightMotor.set_velocity(abs(velocity), PERCENT)\n            \n    \n    LeftMotor.stop()\n    RightMotor.stop()\n    \ndef when_started1():\n    drivestraight(20, 90)\n    pass\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[12],"name":"LeftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[11],"name":"RightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[10],"name":"TouchLedR","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{}},{"port":[9],"name":"TouchLedL","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{}}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}